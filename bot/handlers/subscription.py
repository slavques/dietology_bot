from datetime import datetime
from aiogram import types, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command

from ..database import SessionLocal
from ..subscriptions import ensure_user, process_payment_success, _daily_check
from ..keyboards import (
    subscription_plans_kb,
    payment_methods_kb,
    subscribe_button,
    pay_kb,
    back_menu_kb,
)
from ..states import SubscriptionState

SUCCESS_CMD = "success1467"
REFUSED_CMD = "refused1467"
NOTIFY_CMD = "notify1467"

INTRO_TEXT = (
    "üçû –†–∞–∑–±–ª–æ–∫–∏—Ä—É–π —Ä–∏—Ç–º!\n\n"
    "–ù–µ —Å—á–∏—Ç–∞–π –∑–∞–ø—Ä–æ—Å—ã.\n"
    "–ù–µ —Å–±–∏–≤–∞–π—Å—è.\n"
    "–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π ‚Äî –≤ —Ç–æ–º –∂–µ —Ç–µ–º–ø–µ.\n"
    "–û—Å—Ç–∞–≤—å –µ–¥—É –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º ‚Äî –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ –Ω–∞–ø—Ä—è–≥–∞.\n\n"
    "üìâ –ß–µ–º –¥–æ–ª—å—à–µ —Å—Ä–æ–∫ ‚Äî —Ç–µ–º –Ω–∏–∂–µ —Ü–µ–Ω–∞!\n"
    " –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –æ–ø–ª–∞—Ç–∞ ‚Äî –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤."
)

PLAN_TEXT = (
    "ü´∂ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!\n\n"
    "–¢—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –ø–æ–Ω—è—Ç–Ω–æ–º—É, —Å—Ç–∞–±–∏–ª—å–Ω–æ–º—É –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –ø–∏—Ç–∞–Ω–∏—é ‚Äî –±–µ–∑ –ø–∞—É–∑ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
    "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–ª–∏—Å—å —Å–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É –ø—Ä–æ—Å—Ç–æ–π –∏ –±—ã—Å—Ç—Ä–æ–π.\n\n"
    "üëá –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±, —á—Ç–æ–±—ã –±–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Å—á–∏—Ç–∞—Ç—å –ö–ë–ñ–£ –ø–æ –∫–∞–∂–¥–æ–º—É —Ñ–æ—Ç–æ:"
)


async def cb_pay(query: types.CallbackQuery):
    """Show payment instructions."""
    await query.message.answer(
        "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /success1467 –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
    )
    await query.answer()


async def show_subscription_menu(message: types.Message):
    await message.answer(INTRO_TEXT, reply_markup=subscription_plans_kb())


async def cb_subscribe(query: types.CallbackQuery, state: FSMContext):
    await show_subscription_menu(query.message)
    await state.clear()
    await query.answer()


async def choose_plan(message: types.Message, state: FSMContext):
    if message.text not in {"üö∂‚Äç‚ôÇÔ∏è1 –º–µ—Å—è—Ü - 149‚ÇΩ", "üèÉ‚Äç‚ôÇÔ∏è3 –º–µ—Å—è—Ü–∞ - 399‚ÇΩ", "üßò‚Äç‚ôÇÔ∏è6 –º–µ—Å—è—Ü–µ–≤ - 799‚ÇΩ"}:
        return
    await state.set_state(SubscriptionState.choosing_method)
    await state.update_data(plan=message.text)
    await message.answer(PLAN_TEXT, reply_markup=payment_methods_kb())


async def choose_method(message: types.Message, state: FSMContext):
    if message.text == "üîô –ù–∞–∑–∞–¥":
        await state.clear()
        await show_subscription_menu(message)
        return
    if message.text not in {"üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", "‚ú®Telegram Stars", "ü™ôCrypto"}:
        return
    data = await state.get_data()
    plan = data.get("plan", "")
    text = (
        "–°–æ–∑–¥–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É.\n"
        f"{message.text}\n"
        f"({plan})\n\n"
        "–û–ø–ª–∞—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∫–Ω–æ–ø–∫–µ \"–û–ø–ª–∞—Ç–∏—Ç—å\" \ud83d\udc47"
    )
    await message.answer(text, reply_markup=pay_kb())
    await message.answer("", reply_markup=back_menu_kb())
    await state.clear()

async def cmd_success(message: types.Message):
    if not message.text.startswith(f"/{SUCCESS_CMD}"):
        return
    session = SessionLocal()
    user = ensure_user(session, message.from_user.id)
    process_payment_success(session, user)
    session.close()
    await message.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")

async def cmd_refused(message: types.Message):
    if not message.text.startswith(f"/{REFUSED_CMD}"):
        return
    await message.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")


async def cmd_notify(message: types.Message):
    if not message.text.startswith(f"/{NOTIFY_CMD}"):
        return
    await _daily_check(message.bot)
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


def register(dp: Dispatcher):
    dp.message.register(cmd_success, Command(SUCCESS_CMD))
    dp.message.register(cmd_refused, Command(REFUSED_CMD))
    dp.message.register(cmd_notify, Command(NOTIFY_CMD))
    dp.message.register(show_subscription_menu, F.text == "‚ö° –ü–æ–¥–ø–∏—Å–∫–∞")
    dp.message.register(
        choose_plan,
        F.text.in_(
            {
                "üö∂‚Äç‚ôÇÔ∏è1 –º–µ—Å—è—Ü - 149‚ÇΩ",
                "üèÉ‚Äç‚ôÇÔ∏è3 –º–µ—Å—è—Ü–∞ - 399‚ÇΩ",
                "üßò‚Äç‚ôÇÔ∏è6 –º–µ—Å—è—Ü–µ–≤ - 799‚ÇΩ",
            }
        ),
    )
    dp.message.register(
        choose_method,
        SubscriptionState.choosing_method,
    )
    dp.callback_query.register(cb_pay, F.data == "pay")
    dp.callback_query.register(cb_subscribe, F.data == "subscribe")
