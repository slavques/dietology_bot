from datetime import datetime, timedelta
from aiogram import types, Dispatcher, F
import tempfile
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ..services import analyze_photo, analyze_photo_with_hint
from ..utils import format_meal_message, parse_serving, to_float
from ..keyboards import meal_actions_kb, back_menu_kb
from ..subscriptions import consume_request, ensure_user, FREE_LIMIT, PAID_LIMIT
from ..database import SessionLocal
from ..states import EditMeal
from ..storage import pending_meals

async def request_photo(message: types.Message):
    session = SessionLocal()
    user = ensure_user(session, message.from_user.id)
    if not consume_request(session, user):
        reset = user.period_start + timedelta(days=30)
        await message.answer(f"–¢–≤–æ–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±–Ω–æ–≤—è—Ç—Å—è {reset.date()}, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É", reply_markup=back_menu_kb())
        session.close()
        return
    session.close()
    await message.answer("üî•–û—Ç–ª–∏—á–Ω–æ! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –µ–¥—ã ‚Äî —è –≤—Å—ë –ø–æ—Å—á–∏—Ç–∞—é —Å–∞–º.", reply_markup=back_menu_kb())

async def handle_photo(message: types.Message, state: FSMContext):
    if message.media_group_id:
        await message.answer(
            "ü§ñ –•–º‚Ä¶ –ø–æ—Ö–æ–∂–µ, —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ —Ñ–∞–π–ª –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
            "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω–æ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî –∏ —è –≤—Å—ë —Ä–∞—Å—Å—á–∏—Ç–∞—é!"
        )
        return

    session = SessionLocal()
    user = ensure_user(session, message.from_user.id)
    if not consume_request(session, user):
        reset = user.period_start + timedelta(days=30)
        await message.answer(
            f"–¢–≤–æ–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±–Ω–æ–≤—è—Ç—Å—è {reset.date()}, –Ω–æ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –±–µ–∑–ª–∏–º–∏—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É",
            reply_markup=back_menu_kb(),
        )
        session.close()
        return
    session.close()

    await message.reply("–ì–æ—Ç–æ–≤–æ! üîç\n–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ‚Ä¶")
    photo = message.photo[-1]
    with tempfile.NamedTemporaryFile(prefix="diet_photo_", delete=False) as tmp:
        await message.bot.download(photo.file_id, destination=tmp.name)
        photo_path = tmp.name
    result = await analyze_photo(photo_path)
    if result.get('error'):
        await message.answer("–°–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ.")
        return
    if not result.get('is_food') or result.get('confidence', 0) < 0.7:
        await message.answer(
            "ü§î –ï–¥—É –Ω–∞ —ç—Ç–æ–º —Ñ–æ—Ç–æ –Ω–∞–π—Ç–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å."
        )
        return

    name = result.get('name')
    ingredients = result.get('ingredients', [])
    serving = parse_serving(result.get('serving', 0))
    macros = {
        'calories': to_float(result.get('calories', 0)),
        'protein': to_float(result.get('protein', 0)),
        'fat': to_float(result.get('fat', 0)),
        'carbs': to_float(result.get('carbs', 0)),
    }

    meal_id = f"{message.from_user.id}_{datetime.utcnow().timestamp()}"
    pending_meals[meal_id] = {
        'name': name,
        'ingredients': ingredients,
        'serving': serving,
        'orig_serving': serving,
        'macros': macros,
        'orig_macros': macros.copy(),
        'photo_path': photo_path,
        'clarifications': 0,
        'chat_id': message.chat.id,
        'message_id': None,
    }

    if not name:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úèÔ∏è –£—Ç–æ—á–Ω–∏—Ç—å", callback_data="refine")
        builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="cancel")
        builder.adjust(2)
        await state.update_data(meal_id=meal_id)
        msg = await message.answer(
            "ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–æ –Ω–∞ —Ñ–æ—Ç–æ.\n"
            "–ú–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Å –≤—Ä—É—á–Ω—É—é?",
            reply_markup=builder.as_markup(),
        )
        pending_meals[meal_id]["message_id"] = msg.message_id
        pending_meals[meal_id]["chat_id"] = msg.chat.id
        await state.set_state(EditMeal.waiting_input)
        return

    msg = await message.answer(
        format_meal_message(name, serving, macros),
        reply_markup=meal_actions_kb(meal_id, clarifications=0)
    )
    pending_meals[meal_id]["message_id"] = msg.message_id
    pending_meals[meal_id]["chat_id"] = msg.chat.id


async def handle_document(message: types.Message):
    await message.answer(
        "ü§ñ –•–º‚Ä¶ –ø–æ—Ö–æ–∂–µ, —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ä–∞–∑—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ —Ñ–∞–π–ª –≤ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n"
        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–¥–Ω–æ —Ñ–æ—Ç–æ –±–ª—é–¥–∞ ‚Äî –∏ —è –≤—Å—ë —Ä–∞—Å—Å—á–∏—Ç–∞—é!"
    )


def register(dp: Dispatcher):
    dp.message.register(request_photo, F.text == "üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ")
    dp.message.register(handle_photo, F.photo)
    dp.message.register(handle_document, F.document)
